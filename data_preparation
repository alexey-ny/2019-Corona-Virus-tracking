# -*- coding: utf-8 -*-
"""
Created on Thu Jan 30 22:41:41 2020

@author: Alexey Kotlik
"""

import pandas as pd
import numpy as np
import requests
from lxml import etree
import datetime

import geopandas as gpd

import folium
from folium import Choropleth, Circle, Marker, CircleMarker
from folium.plugins import HeatMap, MarkerCluster

from geopandas.tools import geocode

field_names = {
        'Province/State': 'State',
        'Country/Region': 'Country',
        'Last Update'   : 'Update',
        'Confirmed'     : 'Confirmed',
        'Deaths'        : 'Deaths',
        'Recovered'     : 'Recovered',
        'Demised'       : 'Deaths',
        ''              : 'Update',
        'Country'       : 'Country',
        'Suspected'     : 'Suspected'
        }

columns =  ['Country', 'State', 'Confirmed', 'Deaths', 'Recovered', 'Suspected', 'Update_date', 'Update_time', 'Report']
       
url = 'https://docs.google.com/spreadsheets/d/1yZv9w9zRKwrGTaR-YzmAqMefw4wMlaXocejdxZaTs6w'

r = requests.get(url, allow_redirects=True)
open('JHU_CSSE_coronavirus.html', 'wb').write(r.content)

parser = etree.HTMLParser()
tree   = etree.parse('JHU_CSSE_coronavirus.html', parser)

result = etree.tostring(tree.getroot(), pretty_print=True, method="html")
root = tree.getroot()

days = []
for report in root.iter("tbody"):
    regions = []
    header = []
    head_cell = report[0]
    for cell in head_cell[1:]:
        if cell.text == None:
            header.append('Update')   #the only case of missing field name on Jan 21st report
        else:
            header.append(field_names[cell.text])
            
    regions.append(header)
    for row in report[1:]:
        region = []
        for cell in row[1:]:
            if cell.text == None:
                if len(cell) > 1:
                    div = cell[0]
                    region.append(div.text)
                else:
                    region.append("")
            else:
                region.append(cell.text)
        regions.append(region)
    days.append(regions)

report_N = len(days)
df = pd.DataFrame(days[0][1:], columns = days[0][0])
df['Suspected'] = ''
df['Report'] = report_N

for report in days[1:]:
    report_N -= 1
    df_day = pd.DataFrame(report[1:], columns = report[0])
    df_day['Report'] = report_N
    df = df.append(df_day, ignore_index = False)      
        
df.fillna(0, inplace = True)
df["Suspected"].replace({"": 0}, inplace=True)
df["Deaths"].replace({"": 0}, inplace=True)
df["Recovered"].replace({"": 0}, inplace=True)
df["Confirmed"].replace({"": 0}, inplace=True)
df = df.astype({'Suspected': 'int','Recovered': 'int','Deaths': 'int','Confirmed': 'int'})
 
def date_conversion(temp_date):
    d_list = temp_date.split(" ")
    if len(d_list) == 0:
        dt = datetime.datetime(0)
    else:
        date1 = d_list[0].split("/")
        dt = datetime.date(int(date1[2]),int(date1[0]),int(date1[1]))
                       
    return dt   
 
def time_conversion(temp_date):
    d_list = temp_date.split(" ")
    dtime = ''
    if len(d_list) > 1:
        time1 = d_list[1].split(":")
        if len(d_list) == 2:
            dtime = datetime.time(int(time1[0]),int(time1[1]))
        else:
            if d_list[2] == 'PM':
                time1[0] = int(time1[0]) + 12
                if time1[0] == 24: time1[0]=0
            dtime = datetime.time(int(time1[0]),int(time1[1]))
                        
    return dtime


df['Update_date'] = df.Update.apply(lambda x : date_conversion(x))    
df['Update_time'] = df.Update.apply(lambda x : time_conversion(x))    

full_df = df[columns]
full_df.to_csv('reports.csv')    
    
reports = full_df.Report.unique()
confirmed = []
deaths = []
recovered = []
timeline = []
for rep in reports:
    cur_slice = full_df[full_df.Report == rep]
    confirmed.append(cur_slice.Confirmed.sum(axis=0))
    deaths.append(cur_slice.Deaths.sum(axis=0))
    recovered.append(cur_slice.Recovered.sum(axis=0))
    temp = cur_slice.Report[0]
    timeline.append(str(cur_slice.iloc[0].Update_date)+' '+str(cur_slice.iloc[0].Update_time))
    

full_geo = full_df.copy()

def fix_china(row):
    if row == 'Mainland China': 
        row = 'China'
    return row

def fix_UAE(row):
    if row == '': 
        row = 'United Arab Emirates'
    return row

def fix_Chicago(row):
    if row == 'Chicago': 
        row = 'Illinois'
    return row

full_geo['Country'] = full_geo['Country'].apply(lambda x: fix_china(x))
full_geo['Country'] = full_geo['Country'].apply(lambda x: fix_UAE(x))
full_geo['State'] = full_geo['State'].apply(lambda x: fix_Chicago(x))

max_report = max(full_geo.Report)
Last_Report = full_geo[full_geo.Report == max_report]
last_deaths = Last_Report.Deaths.sum(axis=0)
last_recovered = Last_Report.Recovered.sum(axis=0)
last_confirmed = Last_Report.Confirmed.sum(axis=0)

unque_states =  full_geo.State.unique().tolist()
unque_countries =  full_geo[full_geo.State == ''].Country.unique().tolist()
un_states = pd.DataFrame(unque_states, columns = ['Name'])
un_countries = pd.DataFrame(unque_countries, columns = ['Name'])

def my_geocoder(row):
    print(row)
    try:
        point = geocode(row, provider='nominatim').geometry.iloc[0]
        return pd.Series({'Latitude': point.y, 'Longitude': point.x, 'geometry': point})
    except:
        return None

un_states[['Latitude', 'Longitude', 'geometry']] = un_states.apply(lambda x: my_geocoder(x['Name']), axis=1)
un_states.dropna(axis = 0, inplace = True)
un_countries[['Latitude', 'Longitude', 'geometry']] = un_countries.apply(lambda x: my_geocoder(x['Name']), axis=1)

start_point = [un_states.iloc[0].Latitude, un_states.iloc[0].Longitude]

def color_producer(val):
    if val == 1:
        return 'forestgreen'
    else:
        return 'darkred'

def radius_producer(state, country, number):
    print(number)
    try:
        if country in unque_countries:
#            print(country)
            num = Last_Report[(Last_Report.Country == country)][number].array[0]
        else:
#            print(country,' ', state)
            num = Last_Report[(Last_Report.State == state)][number].array[0]
    except:
        num = 0
    num = int(np.sqrt(num))
    print(num)
    return int(num)

map = folium.Map(location=start_point, tiles='CartoDB dark_matter', zoom_start=5)

# Add a bubble map to the base map
for idx, row in un_states.iterrows():
        CircleMarker([row['Latitude'], row['Longitude']],
               radius = radius_producer(row['Name'], '', 'Confirmed'),
               popup = row['Name'] + ' '  + '(Confirmed='+str(10) + ' Deaths=' + str(5) + ' Recovered=' + str(5) + ')',
               fill_opacity = 0.3,
               weight = 2, 
               fill = True, 
               color=color_producer(2),
               fillColor = color_producer(2)
               ).add_to(map)
        CircleMarker([row['Latitude'], row['Longitude']],
               radius = radius_producer(row['Name'], '', 'Deaths'),
               fill_opacity = 0.3,
               weight = 1, 
               fill = False, 
               color=color_producer(1),
#               fillColor = color_producer(1)
               ).add_to(map)

for idx, row in un_countries.iterrows():
        CircleMarker([row['Latitude'], row['Longitude']],
               radius = radius_producer('', row['Name'], 'Deaths'),
               popup = row['Name'] + ' '  + '(Confirmed='+str(10) + ' Deaths=' + str(5) + ' Recovered=' + str(5) + ')',
               fill_opacity = 0.3,
               weight = 2, 
               fill = True, 
               color=color_producer(2),
               fillColor = color_producer(2)
               ).add_to(map)
        CircleMarker([row['Latitude'], row['Longitude']],
               radius = radius_producer(row['Name'], '', 'Deaths'),
               fill_opacity = 0.3,
               weight = 1, 
               fill = False, 
               color=color_producer(1),
#               fillColor = color_producer(1)
               ).add_to(map)

# Display the map
map.save("2019_nCoV_bubbles3.html")
